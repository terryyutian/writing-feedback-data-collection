import streamlit as st
import streamlit.components.v1 as components
import time
from src.workflow import demographic_data_store, essay_data_store

# Main app
def main():
    # Initialize session state variables
    initialize_session_state()
    
    # Page navigation
    if st.session_state.page == "study_info":
        study_info_page()
    elif st.session_state.page == "demographic":
        demographic_survey_page()
    elif st.session_state.page == "essay_drafting":
        essay_drafting_page()
    elif st.session_state.page == "thank_you":
        thank_you_page()

def initialize_session_state():
    """Initialize session state variables."""
    default_values = {
        "page": "study_info",
        "start_time": time.time(),
        "essay_start_time": None,  # NEW: Track when essay drafting page starts
        "time_up": False,
        "submitted": False,
        "essay_text": "",
        "show_submit_confirmation": False 
    }
    for key, value in default_values.items():
        if key not in st.session_state:
            st.session_state[key] = value

@st.dialog("Confirm Submission")
def submit_confirmation_dialog():
    """Modal dialog for essay submission confirmation."""
    st.write("Are you sure you want to submit your essay?")
    st.write("Once submitted, you cannot make any changes.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("✅ OK", type="primary", use_container_width=True):
            # Process the submission
            student_id = st.session_state.demographic_data.get("ASURite", "unknown_id")
            submit_time = time.time()
            writing_time_seconds = submit_time - st.session_state.essay_start_time
            writing_time_minutes = writing_time_seconds / 60
            
            essay_data_store(student_id.strip(), {
                "essay": st.session_state.essay_text,
                "writing_time": writing_time_minutes
            })
            
            st.session_state.submitted = True
            st.session_state.show_submit_confirmation = False
            st.session_state.page = "thank_you"
            st.rerun()
    
    with col2:
        if st.button("❌ Cancel", use_container_width=True):
            # Close dialog without doing anything
            st.session_state.show_submit_confirmation = False
            st.rerun()

def study_info_page():
    """Display the study information page."""
    st.markdown("<h1 style='text-align: center;'>Study Information</h1>", unsafe_allow_html=True)
    
    with st.expander("Click to read study details", expanded=True):
        st.markdown("""
        Investigator: Dr. Yu Tian                            
        Email: ytian126@asu.edu                            
        Learning Engineering Institute                            
        Arizona State University                            

        **Title: Optimizing Language-Focused Writing Feedback from Large Language Models through Prompt Engineering**                            

        I am a researcher at the Learning Engineering Institute (LEI) at ASU and I am requesting your participation as a volunteer in the above-named research project. I am conducting a research
        study to examine how different prompt engineering strategies influence the quality and effectiveness of feedback generated by large language models (LLMs) on college students' writing.

        I am inviting your participation, which will involve researcher use of some of your writing data during two orientation sessions in the College of Liberal Arts and Sciences Early Start program. Specifically, your initial draft and revised version during the writing activities of the orientation as well as your responses to two surveys will be collected for research use. You have the right to stop participation at any time. All writing activities and the surveys will be completed as part of program orientation activities. We expect the first session to take 33 minutes and the second session to take 22 minutes. The total participation time for each student will be approximately 55 minutes across the two sessions.

        Your participation in this study is voluntary. If you choose not to participate or to opt-out of having your data used in the study at any time, there will be no penalty. For example, it will not affect your grade or academic standing. Your program leader will not be aware of whether you have opted out of having your data used in the study. You will not be compensated for participating in this study. You must be at least 18 years old to participate.

        Although there may be no direct benefits, your participation will contribute to the development of AI-powered automated writing feedback generation systems for higher education contexts. There are no foreseeable risks or discomforts to your participation.

        While we will collect your ASURite to connect your data from different aspects of the course, your responses will be anonymized prior to any analysis of the data. Deidentified data may be shared as part of the dissemination process through open science repositories (e.g., OSF, Databrary) through preregistration of a study or at the request of a publisher (e.g., open access journal), and aggregate results of this study may be used in reports, presentations, or publications but your name and other identifying information will not be used.

        To de-identify data, we will use a master-list created by removing key identifiers, replacing those identifiers with a pseudonym, and creating a separate spreadsheet with the original and the pseudonym for each participant stored in an ASU secure server separate from de-identified data. The data will be stored for up to 10 years after the completion of data collection. After such time, all data will be deleted from computers and removed from cloud storage.

        If you have any questions concerning the research study, please contact the research team at:
        ytian126@asu.edu. If you have any questions about your rights as a subject/participant in this research, or if you feel you have been placed at risk, you can contact the Chair of the Human Subjects Institutional Review Board, through the ASU Office of Research Integrity and Assurance, at (480) 965-6788.

        **Data Use Consent:**
        If you do not wish for your data to be used in the research project, select "Program Use Only" and your data will be removed prior to the research analysis.
        """)
        
        if "program_use_only" not in st.session_state:
            st.session_state.program_use_only = False  # Set initial value if not present
        
        st.session_state.program_use_only = st.checkbox(
            "Program Use Only", value=st.session_state.program_use_only
        )

    # Add spacing
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # Create three columns: left, center, right
    col1, col2, col3 = st.columns([1, 2, 1])
    
    # Place the button in the center column
    with col2:
        if st.button("Next"):
            print("Program Use Only:", st.session_state.get("program_use_only"))
            st.session_state.program_use_only_value = st.session_state.get("program_use_only", False)
            st.session_state.page = "demographic"
            st.rerun()

def demographic_survey_page():
    """Display the demographic survey page."""
    st.markdown("""
    <style>
    .back-button {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 100;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Back button
    if st.button("← Back", key="back_to_study_info"):
        st.session_state.page = "study_info"
        st.rerun()
        
    st.markdown("<h1 style='text-align: center;'>Demographic Survey</h1>", unsafe_allow_html=True)
    
    errors = []
    
    # All inputs
    ASURite = st.text_input("Q1 What is your ASURite?")
    Gender = st.radio(
        "Q2 What gender do you identify as?",
        ["Male", "Female", "Non-binary / third gender", "Prefer not to say"]
    )
    Age = st.text_input("Q3 What is your age? (Please write down the number only. e.g., 33)")
    Race_Ethnicity = st.radio(
        "Q4 Which race / ethnicity best describes you?",
        ["White", "Black or African American", "American Indian or Alaska Native", "Asian",
         "Native Hawaiian or Pacific Islander", "Hispanic or Latino", "Multiple ethnicity / Other (please specify)"]
    )
    
    Race_Ethnicity_Specify = ""
    if Race_Ethnicity == "Multiple ethnicity / Other (please specify)":
        Race_Ethnicity_Specify = st.text_input("Please specify your ethnicity")
    
    Major = st.text_input("Q5 What is your current major?")
    Major_Category = st.radio(
        "Q6 How would you categorize your current major(s)?",
        ["Arts and Humanities", "Business", "Health and Medicine", "Science, Math, and Technology",
         "Social Science", "Other (Please specify)", "Not sure"]
    )
    
    Major_Category_Specify = ""
    if Major_Category == "Other (Please specify)":
        Major_Category_Specify = st.text_input("Please specify the category")
    
    Language_Background = st.radio(
        "Q7 Which of the following applies to you?",
        ["I grew up speaking English only",
         "I grew up speaking English plus at least one other language.",
        "I grew up speaking language(s) other than English"]
    )
    
    Native_Language = Years_Studied_English = Years_in_US = ""
    if Language_Background == "I grew up speaking language(s) other than English":
        Native_Language = st.text_input("Q8 What is your native language or first language learned (should not be English)?")
        Years_Studied_English = st.text_input("Q9 How many years have you studied English?")
        Years_in_US = st.text_input("Q10 How many years have you been in the U.S.?")

    # Add spacing
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # Create three columns: left, center, right
    col1, col2, col3 = st.columns([1, 2, 1])
    
    # Place the button in the center column
    with col2:
        if st.button("Submit"):
            errors = validate_demographic_inputs(ASURite, Gender, Age, Race_Ethnicity, Race_Ethnicity_Specify, Major, Major_Category, Major_Category_Specify, Language_Background, Native_Language, Years_Studied_English, Years_in_US)
            if errors:
                for e in errors:
                    st.warning(e)
            else:
                data = {
                    "program_use_only": st.session_state.get("program_use_only", False),
                    "ASURite": ASURite,
                    "Gender": Gender,
                    "Age": Age,
                    "Race_Ethnicity": Race_Ethnicity,
                    "Race_Ethnicity_Specify": Race_Ethnicity_Specify,
                    "Major": Major,
                    "Major_Category": Major_Category,
                    "Major_Category_Specify": Major_Category_Specify,
                    "Language_Background": Language_Background,
                    "Native_Language": Native_Language,
                    "Years_Studied_English": Years_Studied_English,
                    "Years_in_US": Years_in_US
                }
                demographic_data_store(data)
                st.session_state.demographic_data = data  # Store data for next page
                st.session_state.page = "essay_drafting"  # Move to essay drafting
                st.rerun()

def validate_demographic_inputs(ASURite, Gender, Age, Race_Ethnicity, Race_Ethnicity_Specify, Major, Major_Category, Major_Category_Specify, Language_Background, Native_Language, Years_Studied_English, Years_in_US):
    """Validate demographic inputs and return a list of errors."""
    errors = []
    
    if not ASURite:
        errors.append("Q1 is required.")
    if not Gender:
        errors.append("Q2 is required.")
    if not Age:
        errors.append("Q3 is required.")
    if not Race_Ethnicity:
        errors.append("Q4 is required.")
    if Race_Ethnicity == "Multiple ethnicity / Other (please specify)" and not Race_Ethnicity_Specify:
        errors.append("Please specify your ethnicity.")
    if not Major:
        errors.append("Q5 is required.")
    if not Major_Category:
        errors.append("Q6 is required.")
    if Major_Category == "Other (Please specify)" and not Major_Category_Specify:
        errors.append("Please specify the category for Q6.")
    if not Language_Background:
        errors.append("Q7 is required.")
    if Language_Background == "I grew up speaking language(s) other than English":
        if not Native_Language:
            errors.append("Q8 is required.")
        if not Years_Studied_English:
            errors.append("Q9 is required.")
        if not Years_in_US:
            errors.append("Q10 is required.")
    
    return errors

def essay_drafting_page():
    # Set page layout to wide
    st.set_page_config(layout="wide")
    
    # Initialize essay start time when page is first loaded
    if st.session_state.essay_start_time is None:
        st.session_state.essay_start_time = time.time()
    
    TOTAL_TIME_SECONDS = 30 * 60  # 30 minutes
    
    def get_time_remaining():
        elapsed = time.time() - st.session_state.start_time
        remaining = int(TOTAL_TIME_SECONDS - elapsed)
        if remaining <= 0:
            st.session_state.time_up = True
            return 0
        return remaining
    
    # Back button
    if st.button("← Back", key="back_to_demographic"):
        st.session_state.page = "demographic"
        st.session_state.essay_start_time = None
        st.rerun()
    
    # Inject CSS for styling (removed confirmation-dialog CSS since we're using st.dialog)
    st.markdown("""
    <style>
    .prompt-box, .essay-box {
        height: 70vh;
        border: 1px solid #ccc;
        padding: 15px;
        background-color: #f9f9f9;
        overflow-y: auto;
        font-size: 16px;
        box-sizing: border-box;
    }
    .timer-box {
        height: 50px;
        text-align: right;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .title-box {
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .submit-container {
        margin-top: 20px;
        text-align: center;
        display: flex;
        justify-content: center;
    }
    .stTextArea textarea {
        height: 70vh !important;
        min-height: 70vh !important;
        box-sizing: border-box;
    }
    .back-button {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 100;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Create two columns for main content
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("<div class='title-box'>Writing Prompt</div>", unsafe_allow_html=True)
        st.markdown("""
        <div class='prompt-box'>
            <p><b>Purpose</b>: This essay is based on the premise that understanding your approach to writing in college and in the Humanities is fundamentally connected to your own experience, interests, investment, and insight as a person. You will use writing to tell the story of where you come from, how where you come from connects to who you are and what you hope to study and pursue in your future pathways as a college student and person. This essay will focus on a turning point in your life that led you to care about, become invested in, or want to study and work on a specific issue, topic, or cause. As such, you will write a brief (400-750 word) turning point narrative in which you explore the roots of your own interest in or thinking about a particular issue that matters to you deeply and the way this "turning point" may shape your ways of thinking about your college studies and life. </p>
            <p><b>Genre</b>: This is a narrative essay. It should be in first person. It is about YOU. It tells your story of a turning point in your life. Your experience and ability to tap into, reflect on, and think about your own lived experience and how it influences your goals and decisions is a key part of becoming and being a successful college student.</p>
            <p><b>Audience</b>: Your Early Start Peers, Dr. Early and Dr. Bebout, and (if you agree) Norton Publishing.</p>
            <p><b>Length</b>: 400-750 words. This can be longer, but not much.</p>
            <p><b>Sources</b>: Use a quote from an article, a song lyric, a line of poetry, or any outside source that helps you tell your story well. This quote may begin your piece or be a part of it. It should NOT be plopped in. Please cite your source(s) using MLA or APA format.</p>
            <p><b>Format</b>: Times New Roman 12pt font, double spaced, spell-checked, and include a great title.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        timer_placeholder = st.empty()
        st.text_area(
            label="Write your essay here:",
            key="essay_text",
            label_visibility="collapsed",
            placeholder="Start typing here..."
        )
        col_submit1, col_submit2, col_submit3 = st.columns([1, 1, 1])
        with col_submit2:
            if st.button("Submit", use_container_width=True):
                st.session_state.show_submit_confirmation = True
                st.rerun()
    
    # Show confirmation dialog if needed using st.dialog
    if st.session_state.show_submit_confirmation:
        submit_confirmation_dialog()
    
    # Timer logic
    remaining = get_time_remaining()
    timer_placeholder.markdown(
        f"<div class='timer-box'><span id='countdown'>{remaining//60:02}:{remaining%60:02}</span></div>",
        unsafe_allow_html=True
    )
    
    components.html(f"""
    <script>
    const endTime = Date.now() + {remaining * 1000};
    const countdownEl = window.parent.document.getElementById("countdown");
    function updateTimer() {{
        const now = Date.now();
        const remaining = Math.max(0, Math.floor((endTime - now) / 1000));
        const minutes = String(Math.floor(remaining / 60)).padStart(2, '0');
        const seconds = String(remaining % 60).padStart(2, '0');
        countdownEl.innerText = minutes + ":" + seconds;
        if (remaining <= 0) {{
            clearInterval(timerInterval);
            const streamlitInput = window.parent.document.querySelector('input[data-testid="stTextInput"][type="text"]');
            if (streamlitInput) {{
                streamlitInput.value = "true";
                streamlitInput.dispatchEvent(new Event("input", {{ bubbles: true }}));
            }}
        }}
    }}
    const timerInterval = setInterval(updateTimer, 1000);
    </script>
    """, height=0)


def thank_you_page():
    """Display the thank you message after submission."""
    st.set_page_config(layout="centered")
    st.markdown("<h2 style='text-align: center; margin-top: 150px;'>Thank you for your submission!</h2>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 18px;'>Your essay has been successfully submitted. You may now close this window.</p>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()